extends ../../layouts/content.pug

block prepend vars
  -var pageTitle = "The power of small development phases | Leaf"
  -var metaUrl = "https://weareleaf.com/blog/the-power-of-small-development-phases"
  -var metaTitle = "The power of small development phases"
  -var metaDescription = "Breaking down deliverables into phases can transform the work of your team. Here's why."

  -var heroHeading = "The power of small development phases"

block pageComponents

  article

    +hero({
      heading: heroHeading,
      author: "Mike Carter",
      date: "17 December 2018",
      minutesToRead: 5
    })

    .section
      .container

        .grid.grid--post

          +share-icons({})

          .blog-post

            p.blog-post__intro Imagine this scenario — someone in your company proposes a new software feature with the potential to save the business thousands of hours of human effort per year. It’s going to replace it all with error free, instant, cheap automation.

            p.blog-post__text Planning of the feature begins, and strategic stakeholders add scope with <i>“could it also…”</i> questions in order to maximise benefit to the business. Then, as possible edge case issues are identified, operational stakeholders add scope with <i>“what about…”</i> questions so that every angle is covered.

            p.blog-post__text Discussions drag on for weeks, and before you know it, the small feature has grown into a large project. At this point, getting agreement between everyone involved has become very difficult.

            p.blog-post__text Eventually a compromise is reached and development on the feature begins. However, progress is slow as all the additional requirements and edge cases are worked through. Unanticipated blockers are frequent, and the non-technical stakeholders start to wonder what’s taking so long.

            p.blog-post__text Over time confidence in the work drops, and eventually other urgent changes take priority. Work on the feature is paused, scaled back significantly, or sometimes even cancelled altogether. Stakeholders and developers are all left frustrated and disheartened by the experience.

            hr.divider

            p.blog-post__text Sound familiar? It doesn’t have to be this way. All of this pain can be avoided by just breaking your projects into small and separate <strong>phases</strong>.

            p.blog-post__text Using simple numbers, if there’s a 20% potential improvement from some new feature, there’s nothing wrong with implementing that in eight 2.5% phases; each one agreed, worked on, and deployed separately. In fact, this approach has many benefits:

            +bullet({
              itemModifier: "padded",
              items: [
                {
                  item: '<strong>Small phases deliver results quickly.</strong> Instead of waiting 8 weeks for a 20% benefit, you accumulate a 2.5% benefit each week for 8 weeks, starting from the end of the first week.'
                },
                {
                  item: '<strong>Small phases are resilient against competing priorities.</strong> If you have to abandon things half-way through, you’ll still have developed, tested, and deployed a 10% improvement.'
                },
                {
                  item: '<strong>Small phases avoid sunk cost.</strong> If your planned improvement doesn’t work, you can change course without throwing away months of effort.'
                },
                {
                  item: '<strong>Small phases build trust.</strong> Specifically, this occurs between developers and stakeholders. No more wondering whether anything will ever be finished.'
                },
                {
                  item: '<strong>Small phases are easy to get agreement on.</strong> Fewer people need to meet and discuss fewer changes, and contentious points need only hold up one phase, not the whole project.'
                },
                {
                  item: '<strong>Small phases are easy to renegotiate.</strong> If alterations need to be made, small changes can be renegotiated without needing to re-check agreement on everything else.'
                },
                {
                  item: '<strong>Small phases are simple to estimate.</strong> Smaller changes to a system are easier to estimate accurately, so everyone gets a better   idea of when things will be done.'
                },
                {
                  item: '<strong>Small phases are less risky.</strong> Bugs may occur, but by keeping each deployed change small you risk deploying fewer bugs at a time, and make any that do creep in easier to identify and squash.'
                }
              ]
            })

            p.blog-post__text So, next time you‘re struggling to get things done, try breaking your project up into small phases, and see how much easier it is to release features, keep stakeholders happy, and build trust.

  section.section.section--lg-spacing
    .container
      .blog-content
        h3.blog-content__heading Keep reading
        +blog-post-grid
